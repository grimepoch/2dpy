def Init():
   # --- author : jamesc

   STR.SetFParam0Name("Fade")
   STR.SetFParam1Name("Radius")
   STR.SetFParam2Name("Speed+Direction")
   GLB.slots = STR.GetMaxSlots()
   GLB.xmode = 0
   # ---    accent : 
   # ---    trigger : 

   GLB.bp = 8
   GLB.rotate = 0

   # --- clear screen
   cr.set_source_rgba(0,0,0,1)
   cr.rectangle(0,0,320,240)
   cr.fill()

   def drawShapes(xCenter, yCenter, bigR, bigPoints, rotate,  r,g,b, ac, time) :
      # --- x/y Center   - center of screen (320x240 for 640x480, etcâ€¦)
      # --- bigR      - how far from the center to draw the polygons
      # --- bigPoints - how man circles to draw around the big circle 
      # --- how quickly the circles move
      # --- ac - accent active ?

      # --- can be an incomming parameter, i choose to hardcode for this one
      bigPoints = 10

      if bigPoints > 0 :
         for points in range(0, bigPoints ) :
            myDegrees = 360.0 * points / bigPoints + rotate 
            myRadians = radians(myDegrees)     

            xSmall = xCenter + cos(myRadians) * bigR     # ---  find 'x' of center point for smShape
            ySmall = yCenter  + sin(myRadians)  * bigR   # ---  find 'y' of center point for smShape

            # --- this code creates an evolution of the polygon in many stages
            myOffset = 0

            # --- draw circle
            cr.set_source_rgb(b, g, r)
            size = ( sin(time) * 20  ) + 5 
            cr.arc(xSmall, ySmall, abs(size), 0, 6.28318530)
            cr.stroke()
   GLB.drawShapes = drawShapes


def Render(cr):
   acc = STR.CheckAccent()
   trig = STR.CheckTrigger()
   f0 = STR.F0mix(1., .00001)
   f1 = STR.F1()
   f2 = STR.F2()

   ftime = STR.FT()
   itime = STR.IT() 
   time = (itime *1.0)  + ftime

   fade = 1. - ( .5 * log(f0) + 1  )

   # ---- clear screen
   cr.set_source_rgba(0,0,0,fade) 
   cr.rectangle(0,0,320,240)
   cr.fill()

   if (f2 < 0.48):
      GLB.rotate = GLB.rotate  -  ( 2. * (1. -f2 )  )
   elif (f2 > 0.52):
      GLB.rotate = GLB.rotate  +  (2. * f2 )
      
   myr = ( sin(time)  )
   r,g,b = hsv_to_rgb( myr , 1., .8 )  
   GLB.drawShapes(160, 120, int(100 * f1), GLB.bp, GLB.rotate, b, g, r, acc, time)


